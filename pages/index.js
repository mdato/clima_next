import Head from "next/head";
import Image from "next/image";
import axios from "axios";
import { useState, useEffect } from "react";
import { BsSearch } from "react-icons/bs";
import Weather from "../components/Weather";
import Spinner from "../components/Spinner";
import fondo from '../public/fondo.jpg';

export default function Home() {
  const isBrowser = typeof window !== "undefined";

  const storedCity = isBrowser && localStorage.getItem("lastCity");
  const [city, setCity] = useState(storedCity || "Buenos Aires");
  const [weather, setWeather] = useState({});
  const [loading, setLoading] = useState(true);
  const [backgroundImageUrl, setBackgroundImageUrl] = useState();

  useEffect(() => {
    if (isBrowser) {
      if (city.trim() !== "") {
        localStorage.setItem("lastCity", city);
      }
    }
  }, [city]);

  useEffect(() => {
    const fetchWeatherData = async () => {
      try {
        const response = await axios.get(
          `https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=${process.env.NEXT_PUBLIC_WEATHER_KEY}`
        );
        setWeather(response.data);
        setLoading(false);

        fetchCityImage();
      } catch (error) {
        console.error("Error fetching weather data:", error);
        setLoading(false);
      }
    };

    fetchWeatherData();
    setCity("");

  
  }, []);

  const fetchCityImage = async () => {
    
    try {

      const imageResponse = await axios.get(
        `https://api.unsplash.com/photos/random?query=${city}&orientation=landscape&client_id=${process.env.NEXT_PUBLIC_UNSPLASH_KEY}`
      );

      const imageUrl =
        imageResponse.data.urls && imageResponse.data.urls.full
          ? imageResponse.data.urls.full
          : null;

      setBackgroundImageUrl(imageUrl);
    } catch (error) {
      console.error("Error fetching city image:", error);
    }
  };

  /*const fetchWeather = (e) => {
    e.preventDefault();
    if (city.trim() !== "") {
      setLoading(true);
      fetchCityImage();
      axios
        .get(
          `https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=${process.env.NEXT_PUBLIC_WEATHER_KEY}`
        )
        .then((response) => {
          setWeather(response.data);
          setLoading(false);
        })
        .catch((error) => {
          console.error("Error fetching weather data:", error);
          setLoading(false);
        });
    }
  };
  */

  const fetchWeather = async (e) => {
    e.preventDefault();
    if (city.trim() !== "") {
      setLoading(true);
      //fetchCityImage();
      try {
        const response = await axios.get(
          `https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=${process.env.NEXT_PUBLIC_WEATHER_KEY}`
        );

        setWeather(response.data);
        setLoading(false);

        // Actualizamos el estado de la ciudad después de guardarla en el local storage.
        if (isBrowser) {
          localStorage.setItem("lastCity", city);
        }

        // Después de obtener los datos y antes de actualizar el estado de la ciudad,
        // limpiamos el cuadro de texto.
        setCity("");
      } catch (error) {
        console.error("Error fetching weather data:", error);
        setLoading(false);
      }
    }
  };

  return (
    <div>
      <Head>
        <title>Weather - Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="transition-image duration-1000 ease-in-out absolute top-0 left-0 right-0 bottom-0 bg-black/50 z-[1]" />
      
      <Image
          src={fondo}
          layout="fill"
          className="object-cover"
          alt="City Background"
        />
      {backgroundImageUrl && (
        <Image
          src={backgroundImageUrl}
          layout="fill"
          className="object-cover"
          alt="City Background"
        />
      )}
      <div className="relative flex justify-between items-center max-w-[500px] w-full m-auto pt-4 px-4 text-white z-10">
        <form
          onSubmit={fetchWeather}
          className="flex justify-between items-center w-full m-auto p-3 bg-black/50 border border-gray-300 text-white rounded-2xl"
        >
          <div>
            <input
              onChange={(e) => setCity(e.target.value)}
              value={city}
              className="bg-transparent border-none text-white focus:outline-none text-2xl"
              type="text"
              placeholder="Search city"
            />
          </div>
          <button onClick={fetchWeather}>
            <BsSearch size={20} />
          </button>
        </form>
      </div>
      {loading ? <Spinner /> : weather.main && <Weather data={weather} />}
    </div>
  );
}
